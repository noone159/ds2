#include <iostream>
#include <queue>
#include <climits>

using namespace std;


struct Vertex {
    int color;    
    int distance; 
    int parent;   
};

struct Graph {
    int numVertices;      
    int** adjMatrix;      
    Vertex* vertices;     

    
    Graph(int n) {
        numVertices = n;
        
        adjMatrix = new int*[n];
        for (int i = 0; i < n; ++i) {
            adjMatrix[i] = new int[n];
        }

        
        vertices = new Vertex[n];
        for (int i = 0; i < n; ++i) {
            vertices[i].color = 0;           
            vertices[i].distance = INT_MAX;  
            vertices[i].parent = -1;         
        }
    }

    
    ~Graph() {
        for (int i = 0; i < numVertices; ++i) {
            delete[] adjMatrix[i];
        }
        delete[] adjMatrix;
        delete[] vertices;
    }

    
    void inputAdjMatrix() {
        cout << "Enter the adjacency matrix:" << endl;
        for (int i = 0; i < numVertices; ++i) {
            for (int j = 0; j < numVertices; ++j) {
                cin >> adjMatrix[i][j];
            }
        }
    }

    
    void BFS(int startVertex) {
        
        vertices[startVertex].color = 1;     
        vertices[startVertex].distance = 0;  
        vertices[startVertex].parent = -1;   

        queue<int> Q; 
        Q.push(startVertex); 
        cout << "BFS Order: ";

        
        while (!Q.empty()) {
            int u = Q.front(); 
            Q.pop();

            cout << u + 1 << " "; 

            for (int v = 0; v < numVertices; ++v) {
                if (adjMatrix[u][v] == 1 && vertices[v].color == 0) { 
                    vertices[v].color = 1;              
                    vertices[v].distance = vertices[u].distance + 1; 
                    vertices[v].parent = u;             
                    Q.push(v);                          
                }
            }
            vertices[u].color = 2;         }
        cout << endl;
    }
};

int main() {
    int n;


    cout << "Enter the number of vertices in graph: ";
    cin >> n;


    Graph g(n);


    g.inputAdjMatrix();

    int startVertex;


    cout << "Enter the starting vertex (1-based index): ";
    cin >> startVertex;
    startVertex--; 

    g.BFS(startVertex);

    return 0;
}
