#include <iostream>
using namespace std;

int MAX_SIZE = 100;

struct Node {
int data;
Node* back;
Node* fore;
};
 
struct DLL {
Node* head;
Node* rear;
int count;
};
 
void createList(DLL& list) {
list.head = NULL;
list.rear = NULL;
list.count = 0;
}
 
bool emptyList( DLL& list) {
return (list.count == 0);
}
 
bool searchList( DLL& list, Node*& pPre, Node*& pLoc, int target) {
pPre = NULL;
pLoc = list.head;
 
while (pLoc != NULL && target > pLoc->data) {
pPre = pLoc;
pLoc = pLoc->fore;
}
 
if (pLoc == NULL) {
return false;
} else {
if (target == pLoc->data) {
return true;
} else {
return false;
}
}
}
 
int insertDLL(DLL& list, int dataIn) {
if (list.count == MAX_SIZE) {
return 0;
}
 
Node* predecessor = NULL;
Node* successor = NULL;
bool found = searchList(list, predecessor, successor, dataIn);
 
if (!found) {
Node* newNode = new Node;
newNode->data = dataIn;
list.count++;
 
if (predecessor == NULL) {
newNode->back = NULL;
newNode->fore = list.head;
list.head = newNode;
} else {
newNode->fore = successor;
newNode->back = predecessor;
predecessor->fore = newNode;
}
 
if (successor == NULL) {
list.rear = newNode;
} else {
successor->back = newNode;
}
 
return 1;
} else {
return 2;
}
}
 
void deleteDLL(DLL& list, Node* deleteNode) {
if (deleteNode == NULL) {
cout << "Data Not Found" << endl;
return;
}
 
Node* predecessor ;
Node* successor ;
 
if (deleteNode->back != NULL) {
Node* predecessor = deleteNode->back;
predecessor->fore = deleteNode->fore;
} else {
list.head = deleteNode->fore;
}
 
if (deleteNode->fore != NULL) {
successor = deleteNode->fore;
successor->back = deleteNode->back;
} else {
list.rear = deleteNode->back;
}
 
delete deleteNode;
list.count--;
cout << "Data deleted successfully.\n";
}
 
void displayHeadToRear( DLL& list) {
Node* pWalker = list.head;
 
while (pWalker != NULL) {
cout << pWalker->data << " -> ";
pWalker = pWalker->fore;
}
 
cout << endl;
}
 
void displayRearToHead( DLL& list) {
Node* pWalker = list.rear;
 
while (pWalker != NULL) {
cout << pWalker->data << " <- ";
pWalker = pWalker->back;
}
 
cout << endl;
}
 
void destroyDLL(DLL& list) {
Node* pWalker = list.head;
 
while (pWalker != NULL) {
Node* temp = pWalker;
pWalker = pWalker->fore;
delete temp;
}
 
list.head = NULL;
list.rear = NULL;
list.count = 0;
}
 
int dllCount( DLL& list) {
return list.count;
}
 
int searchDLLFromHead( DLL& list, int target) {
Node* pLoc = list.head;
int pos = 1;
 
while (pLoc != NULL && target > pLoc->data) {
pos++;
pLoc = pLoc->fore;
}
 
if (pLoc == NULL) {
return -1;
} else {
if (target == pLoc->data) {
return pos;
} else {
return -1;
}

}

}
 
int searchDLLFromRear( DLL& list, int target) {
Node* pLoc = list.rear;
int pos = 1;
 
while (pLoc != NULL && target < pLoc->data) {
pos++;
pLoc = pLoc->back;
}
 
if (pLoc == NULL) {
return -1;
} else {
if (target == pLoc->data) {
return pos;
} else {
return -1;
}
}
}
 
int main() {
DLL list;
createList(list);
 
int choice, data, result;
bool done = false;
 
while (true) {
cout << "Menu:\n";
cout << "1. Insert data\n";
cout << "2. Delete data\n";
cout << "3. Display from head to rear\n";
cout << "4. Display from rear to head\n";
cout << "5. Count the number of nodes\n";
cout << "6. Search from head\n";
cout << "7. Search from rear\n";
cout << "8. Destroy\n";
cout << "9. Exit\n";
cout << "Enter your choice: ";
cin >> choice;
 
switch (choice) {
case 1:
cout << "Enter the data to insert: ";
cin >> data;
result = insertDLL(list, data);
if (result == 0) {
cout << "Failed to insert data. List is full.\n";
} else if (result == 1) {
cout << "Data inserted successfully.\n";
} else if (result == 2) {
cout << "Failed to insert data. Duplicate key presented.\n";
}
break;
case 2:
if (emptyList(list)) {
cout << "List is empty.\n";
} else {
cout << "Enter the data to delete: ";
cin >> data;
Node* pPre = NULL;
Node* pLoc = NULL;
bool found = searchList(list, pPre, pLoc, data);
deleteDLL(list, pLoc);

}
break;
case 3:
if (emptyList(list)) {
cout << "List is empty.\n";
} else {
displayHeadToRear(list);
}
break;
case 4:
if (emptyList(list)) {
cout << "List is empty.\n";
} else {
displayRearToHead(list);
}
break;
case 5:
result = dllCount(list);
if (result == 0) {
cout << "List is empty.\n";
} else {
cout << "List Count " << result
<< ".\n";
}
break;
case 6:
cout << "Enter the data to search from head: ";
cin >> data;
result = searchDLLFromHead(list, data);
if (result == -1) {
cout << "Data not found in the list.\n";
} else {
cout << "Data found at position " << result << " from head.\n";
}
break;
case 7:
cout << "Enter the data to search from rear: ";
cin >> data;
result = searchDLLFromRear(list, data);
if (result == -1) {
cout << "Data not found in the list.\n";
} else {
cout << "Data found at position " << result << " from rear.\n";
}
break;
case 8:
destroyDLL(list);
break;
case 9:
return 0;
default:
cout << "Invalid choice. Try again.\n";
}

}
return 0;
}